import javax.swing.*;
import java.awt.event.*;

/**
 * This is the RockGen class that generates Rock Objects.
 * 
 * @author Eric Tu and Sejin Kwon
 * @version 4
 * @since June 1 2012
 */
public class TrapGen extends Thread implements ActionListener
{
  private Timer t;
  private int difficulty; 
  private int maxDiff; 
  private int minDelay;
  private double freq; 
  private double maxFreq;
  
  public TrapGen (int delay, int diff, double freq)
  {
    this.freq = freq; 
    maxFreq = this.freq + 0.5;
    difficulty = diff; 
    maxDiff = diff + 3000;
    minDelay = delay - 3000;
    t = new Timer (delay, this);
  }
  /**
   * Helps create random rocks and set their bounds on the JPanel jpan. 
   */
  public Trap randomizeTrap()
  {
    Trap trap = new Trap ((int) (Math.random () * 550), (int) (Math.random () * 550), difficulty);
    trap.setBounds (trap.getXPos (), trap.getYPos (), trap.getPreferredSize ().width, trap.getPreferredSize ().height);
    return trap;
  }
  /**
   * Helps create random rocks and set their bounds on the JPanel jpan. 
   */
  public RedTrap randomizeRedTrap()
  {
    RedTrap redTrap = new RedTrap ((int) (int) (Math.random () * 550), (int) (Math.random () * 550), difficulty);
    redTrap.setBounds (redTrap.getXPos (), redTrap.getYPos (), redTrap.getPreferredSize ().width, redTrap.getPreferredSize ().height);
    return redTrap;
  }
  /**
   * Generates and draws out random Rocks on the screen infinitely. 
   * The while loop runs infinitely. This is to help draw infinite amount of Rocks. 
   * The try-catch structure helps to delay the loop so that Flowers aren't coming in extremely fast. 
   */
  public void actionPerformed (ActionEvent e)
  { 
    double k = Math.random ();
    if (k > freq)
      FrameApp.g.add (randomizeTrap ());
    else
      FrameApp.g.add (randomizeRedTrap ());
    FrameApp.g.updateUI();
  }
  public void changeDifficulty ()
  {
    if (t.getDelay () >= minDelay)
    {
      t.setDelay (t.getDelay () - 300);
    }
    if (difficulty <= maxDiff)
    {
      difficulty += 300;
    }
    if (freq <= maxFreq)
    {
      freq += 0.05;
    }
  }
  public void pause ()
  {
    t.stop ();
  }
  
  public void resumeGame ()
  {
    t.start ();
  }
  
  public void run ()
  {
    resumeGame ();
  }
}